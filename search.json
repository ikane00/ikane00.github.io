[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "bloggy",
    "section": "",
    "text": "Hello\n\n\n\n\n\n\n\nsports\n\n\ndata\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nIsabella Kane\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/introduction/index.html",
    "href": "posts/introduction/index.html",
    "title": "Hello",
    "section": "",
    "text": "Hi, my name is Bella. I’m a senior majoring in sports media and communication and ADPR. I’m from Godfrey, Illinois but currently live in Lincoln, Nebraska to attend the University of Nebraska-Lincoln."
  },
  {
    "objectID": "MAJOR ASSIGNMENT.html",
    "href": "MAJOR ASSIGNMENT.html",
    "title": "Best Tennis Players",
    "section": "",
    "text": "The Best Tennis Servers\nI used a bar chart to find who were the Top 10 Male Tennis Servers. I was able to find that Ivo Karlovic has the best serving percentage with 92% on all services including clay, hard, and grass. His career service games won is 8,845, though Karlovic is no longer an active player. Though Karlovic isn’t in the top 50 list of Wins and Losses, which can tell us that even if you are a really good server, it doesn’t necessarily make you a great tennis player. I will also discuss this later with Novak Djokovic, who ranks in the top 15 of servers. The other great servers here are John Isner, Milos Raonic, Andy Roddick, Roger Federer, Pete Sampras, Nick Kyrgios, Wayne Arthurs, Matteo Berrettini, and Richard Krajicek. The top 10 servers fall between 75%-92% in serving percentages. Counting just active players, John Isner would be the best server. Roddick, Federer, Sampras, Arthurs, and Krajicek are the other inactive players on this list, leaving four active players as the best servers of all time.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nserves &lt;- read_csv(\"~/350/bloggy/Tennis Serves - Sheet1 (2).csv\")\n\nRows: 10 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Player, Country\ndbl (1): Percentage\nnum (3): Games Won, Total Games, Matches\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nplayers &lt;- serves |&gt;\n  mutate(\n    `Games Won` = Percentage/ `Total Games`\n  )\n\nggplot() + \n  geom_bar(data=players, aes(x=reorder(Player, Percentage), weight=Percentage)) +\n  coord_flip() +\n   labs(\n    x=\"Players\", \n    y=\"Serving Percentage\", \n    title=\"Best Servers on the ATP Tour\", \n    subtitle=\"Serving Percentages Among Top Male Players\", \n    caption=\"Source: ATP Tour | Isabella Kane\"\n    )\n\n\n\n\n\n\nRegistered S3 methods overwritten by 'ggalt':\n  method                  from   \n  grid.draw.absoluteGrob  ggplot2\n  grobHeight.absoluteGrob ggplot2\n  grobWidth.absoluteGrob  ggplot2\n  grobX.absoluteGrob      ggplot2\n  grobY.absoluteGrob      ggplot2\n\n\nRows: 50 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Player\ndbl (8): Rank, Serve Rating, 1st Serve, 1st Serve Points Won, 2nd Serve Poin...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nCall:\nlm(formula = `Service Games Won` ~ `Avg. Double Faults/Match`, \n    data = fault)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-4.683 -1.970 -0.050  1.625  5.511 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                83.25511    1.07466  77.471   &lt;2e-16 ***\n`Avg. Double Faults/Match`  0.01634    0.36429   0.045    0.964    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.763 on 48 degrees of freedom\nMultiple R-squared:  4.189e-05, Adjusted R-squared:  -0.02079 \nF-statistic: 0.002011 on 1 and 48 DF,  p-value: 0.9644\n\n\n\n\n\nAbove I have a scatterplot so I could compare the average double faults in a match among service games won. The average double faults in a match among the top 79 men’s singles players doesn’t go above 6 and is usually between 2 to 4 a match. Djokovic is the dot at 2.8 faults a match and 89% service games won. The outlier dot at 7.5 faults a match is Alexander Bublik.\nThis dumbbell chart below can be a bit hard to read but I wanted to compare wins and losses among the top twenty tennis players. The top player in terms of wins and losses this year is Carlos Alvarez, who actually ended up winning Wimbledon 2023 in men’s singles. He won 64 matches and lost only nine. Following him is Novak Djokovic, who Alvarez played in the Wimbledon’s final match. He won 46 matches and lost five. From these charts, I have learned that being a good server can make you a great player in the case of Djokovic, but there are many other factors that come into play on the court.\n\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(ggtext)\n\nwins &lt;- read_csv(\"~/350/bloggy/Win Loss Index - Sheet1.csv\")\n\nRows: 20 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Player, YTD Titles, YTD Win/Loss\ndbl (2): Rank, YTD Index\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nscore &lt;- wins |&gt; separate(`YTD Win/Loss`, into=c(\"Win\", \"Loss\"), sep=\"-\")\n\nggplot() +\n  geom_dumbbell(\n    data=score,\n    aes(y=Player, x=Win, xend=Loss)\n  )\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\nggplot() + \n  geom_dumbbell(\n    data=score, \n    aes(y=Player, x=Win, xend=Loss),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n    labs(\n    title=\"Wins and Losses on the ATP Tour\", \n    subtitle = \"Wins are green, Losses are red.\", caption=\"Source: ATP | Bella Kane\"\n  ) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )"
  },
  {
    "objectID": "BarChart.html",
    "href": "BarChart.html",
    "title": "Isabella Kane's Sports Data Blog",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nserves &lt;- read_csv(\"~/350/bloggy/Tennis Serves - Sheet1 (2).csv\")\n\nRows: 10 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Player, Country\ndbl (1): Percentage\nnum (3): Games Won, Total Games, Matches\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nplayers &lt;- serves |&gt;\n  mutate(\n    `Games Won` = Percentage/ `Total Games`\n  )\n\n\nggplot() + \n  geom_bar(data=players, aes(x=reorder(Player, Percentage), weight=Percentage)) +\n  coord_flip() +\n   labs(\n    x=\"Players\", \n    y=\"Serving Percentage\", \n    title=\"Best Servers on the ATP Tour\", \n    subtitle=\"Serving Percentages Among Top Male Players\", \n    caption=\"Source: ATP Tour | Isabella Kane\"\n    )"
  },
  {
    "objectID": "ScatterplotChart.html",
    "href": "ScatterplotChart.html",
    "title": "Isabella Kane's Sports Data Blog",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggalt)\n\nRegistered S3 methods overwritten by 'ggalt':\n  method                  from   \n  grid.draw.absoluteGrob  ggplot2\n  grobHeight.absoluteGrob ggplot2\n  grobWidth.absoluteGrob  ggplot2\n  grobX.absoluteGrob      ggplot2\n  grobY.absoluteGrob      ggplot2\n\n\n\nfault &lt;- read_csv(\"~/350/bloggy/Faults - Sheet1.csv\")\n\nRows: 50 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Player\ndbl (8): Rank, Serve Rating, 1st Serve, 1st Serve Points Won, 2nd Serve Poin...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot() + \n  geom_point(data=fault, aes(x=`Avg. Double Faults/Match`, y=`Service Games Won`))\n\n\n\n\n\nggplot() + \n  geom_point(data=fault, aes(x=`Avg. Double Faults/Match`, y=`Service Games Won`)) +\n  geom_smooth(data=fault, aes(x=`Avg. Double Faults/Match`, y=`Service Games Won`), method=\"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nfit &lt;- lm(`Service Games Won` ~ `Avg. Double Faults/Match`, data = fault)\nsummary(fit)\n\n\nCall:\nlm(formula = `Service Games Won` ~ `Avg. Double Faults/Match`, \n    data = fault)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-4.683 -1.970 -0.050  1.625  5.511 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                83.25511    1.07466  77.471   &lt;2e-16 ***\n`Avg. Double Faults/Match`  0.01634    0.36429   0.045    0.964    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.763 on 48 degrees of freedom\nMultiple R-squared:  4.189e-05, Adjusted R-squared:  -0.02079 \nF-statistic: 0.002011 on 1 and 48 DF,  p-value: 0.9644\n\n\n\nnd &lt;- fault |&gt; filter(Player == \"Novak Djokovic\")\n\nggplot() + \n  geom_point(data=fault, aes(x=`Avg. Double Faults/Match`, y=`Service Games Won`), color=\"grey\") +\n  geom_text(data=nd, aes(x=`Avg. Double Faults/Match`-.05, y=`Service Games Won`+7, label=Player)) + \n  geom_encircle(data=nd, aes(x=`Avg. Double Faults/Match`-.05, y=`Service Games Won`+7), s_shape=1, expand=1, colour=\"red\") +\n   labs(title=\"Novak Djokovic's Faults Per Game\", subtitle=\"Comparing double faults and games won among tennis greats.\", x=\"Average Double Faults Per Match\", y=\"Service Games Won\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )"
  }
]